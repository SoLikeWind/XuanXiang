// Code generated by ent, DO NOT EDIT.

package article

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/SoLikeWind/XuanXiang/model/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldUpdatedAt, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldTitle, v))
}

// Summary applies equality check predicate on the "summary" field. It's identical to SummaryEQ.
func Summary(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldSummary, v))
}

// Image applies equality check predicate on the "image" field. It's identical to ImageEQ.
func Image(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldImage, v))
}

// ContentMd applies equality check predicate on the "content_md" field. It's identical to ContentMdEQ.
func ContentMd(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldContentMd, v))
}

// ContentHTML applies equality check predicate on the "content_html" field. It's identical to ContentHTMLEQ.
func ContentHTML(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldContentHTML, v))
}

// Views applies equality check predicate on the "views" field. It's identical to ViewsEQ.
func Views(v int64) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldViews, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldUpdatedAt, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Article {
	return predicate.Article(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Article {
	return predicate.Article(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Article {
	return predicate.Article(sql.FieldContainsFold(FieldTitle, v))
}

// SummaryEQ applies the EQ predicate on the "summary" field.
func SummaryEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldSummary, v))
}

// SummaryNEQ applies the NEQ predicate on the "summary" field.
func SummaryNEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldSummary, v))
}

// SummaryIn applies the In predicate on the "summary" field.
func SummaryIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldSummary, vs...))
}

// SummaryNotIn applies the NotIn predicate on the "summary" field.
func SummaryNotIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldSummary, vs...))
}

// SummaryGT applies the GT predicate on the "summary" field.
func SummaryGT(v string) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldSummary, v))
}

// SummaryGTE applies the GTE predicate on the "summary" field.
func SummaryGTE(v string) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldSummary, v))
}

// SummaryLT applies the LT predicate on the "summary" field.
func SummaryLT(v string) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldSummary, v))
}

// SummaryLTE applies the LTE predicate on the "summary" field.
func SummaryLTE(v string) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldSummary, v))
}

// SummaryContains applies the Contains predicate on the "summary" field.
func SummaryContains(v string) predicate.Article {
	return predicate.Article(sql.FieldContains(FieldSummary, v))
}

// SummaryHasPrefix applies the HasPrefix predicate on the "summary" field.
func SummaryHasPrefix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasPrefix(FieldSummary, v))
}

// SummaryHasSuffix applies the HasSuffix predicate on the "summary" field.
func SummaryHasSuffix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasSuffix(FieldSummary, v))
}

// SummaryEqualFold applies the EqualFold predicate on the "summary" field.
func SummaryEqualFold(v string) predicate.Article {
	return predicate.Article(sql.FieldEqualFold(FieldSummary, v))
}

// SummaryContainsFold applies the ContainsFold predicate on the "summary" field.
func SummaryContainsFold(v string) predicate.Article {
	return predicate.Article(sql.FieldContainsFold(FieldSummary, v))
}

// ImageEQ applies the EQ predicate on the "image" field.
func ImageEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldImage, v))
}

// ImageNEQ applies the NEQ predicate on the "image" field.
func ImageNEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldImage, v))
}

// ImageIn applies the In predicate on the "image" field.
func ImageIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldImage, vs...))
}

// ImageNotIn applies the NotIn predicate on the "image" field.
func ImageNotIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldImage, vs...))
}

// ImageGT applies the GT predicate on the "image" field.
func ImageGT(v string) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldImage, v))
}

// ImageGTE applies the GTE predicate on the "image" field.
func ImageGTE(v string) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldImage, v))
}

// ImageLT applies the LT predicate on the "image" field.
func ImageLT(v string) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldImage, v))
}

// ImageLTE applies the LTE predicate on the "image" field.
func ImageLTE(v string) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldImage, v))
}

// ImageContains applies the Contains predicate on the "image" field.
func ImageContains(v string) predicate.Article {
	return predicate.Article(sql.FieldContains(FieldImage, v))
}

// ImageHasPrefix applies the HasPrefix predicate on the "image" field.
func ImageHasPrefix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasPrefix(FieldImage, v))
}

// ImageHasSuffix applies the HasSuffix predicate on the "image" field.
func ImageHasSuffix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasSuffix(FieldImage, v))
}

// ImageIsNil applies the IsNil predicate on the "image" field.
func ImageIsNil() predicate.Article {
	return predicate.Article(sql.FieldIsNull(FieldImage))
}

// ImageNotNil applies the NotNil predicate on the "image" field.
func ImageNotNil() predicate.Article {
	return predicate.Article(sql.FieldNotNull(FieldImage))
}

// ImageEqualFold applies the EqualFold predicate on the "image" field.
func ImageEqualFold(v string) predicate.Article {
	return predicate.Article(sql.FieldEqualFold(FieldImage, v))
}

// ImageContainsFold applies the ContainsFold predicate on the "image" field.
func ImageContainsFold(v string) predicate.Article {
	return predicate.Article(sql.FieldContainsFold(FieldImage, v))
}

// ContentMdEQ applies the EQ predicate on the "content_md" field.
func ContentMdEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldContentMd, v))
}

// ContentMdNEQ applies the NEQ predicate on the "content_md" field.
func ContentMdNEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldContentMd, v))
}

// ContentMdIn applies the In predicate on the "content_md" field.
func ContentMdIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldContentMd, vs...))
}

// ContentMdNotIn applies the NotIn predicate on the "content_md" field.
func ContentMdNotIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldContentMd, vs...))
}

// ContentMdGT applies the GT predicate on the "content_md" field.
func ContentMdGT(v string) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldContentMd, v))
}

// ContentMdGTE applies the GTE predicate on the "content_md" field.
func ContentMdGTE(v string) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldContentMd, v))
}

// ContentMdLT applies the LT predicate on the "content_md" field.
func ContentMdLT(v string) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldContentMd, v))
}

// ContentMdLTE applies the LTE predicate on the "content_md" field.
func ContentMdLTE(v string) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldContentMd, v))
}

// ContentMdContains applies the Contains predicate on the "content_md" field.
func ContentMdContains(v string) predicate.Article {
	return predicate.Article(sql.FieldContains(FieldContentMd, v))
}

// ContentMdHasPrefix applies the HasPrefix predicate on the "content_md" field.
func ContentMdHasPrefix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasPrefix(FieldContentMd, v))
}

// ContentMdHasSuffix applies the HasSuffix predicate on the "content_md" field.
func ContentMdHasSuffix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasSuffix(FieldContentMd, v))
}

// ContentMdEqualFold applies the EqualFold predicate on the "content_md" field.
func ContentMdEqualFold(v string) predicate.Article {
	return predicate.Article(sql.FieldEqualFold(FieldContentMd, v))
}

// ContentMdContainsFold applies the ContainsFold predicate on the "content_md" field.
func ContentMdContainsFold(v string) predicate.Article {
	return predicate.Article(sql.FieldContainsFold(FieldContentMd, v))
}

// ContentHTMLEQ applies the EQ predicate on the "content_html" field.
func ContentHTMLEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldContentHTML, v))
}

// ContentHTMLNEQ applies the NEQ predicate on the "content_html" field.
func ContentHTMLNEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldContentHTML, v))
}

// ContentHTMLIn applies the In predicate on the "content_html" field.
func ContentHTMLIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldContentHTML, vs...))
}

// ContentHTMLNotIn applies the NotIn predicate on the "content_html" field.
func ContentHTMLNotIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldContentHTML, vs...))
}

// ContentHTMLGT applies the GT predicate on the "content_html" field.
func ContentHTMLGT(v string) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldContentHTML, v))
}

// ContentHTMLGTE applies the GTE predicate on the "content_html" field.
func ContentHTMLGTE(v string) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldContentHTML, v))
}

// ContentHTMLLT applies the LT predicate on the "content_html" field.
func ContentHTMLLT(v string) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldContentHTML, v))
}

// ContentHTMLLTE applies the LTE predicate on the "content_html" field.
func ContentHTMLLTE(v string) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldContentHTML, v))
}

// ContentHTMLContains applies the Contains predicate on the "content_html" field.
func ContentHTMLContains(v string) predicate.Article {
	return predicate.Article(sql.FieldContains(FieldContentHTML, v))
}

// ContentHTMLHasPrefix applies the HasPrefix predicate on the "content_html" field.
func ContentHTMLHasPrefix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasPrefix(FieldContentHTML, v))
}

// ContentHTMLHasSuffix applies the HasSuffix predicate on the "content_html" field.
func ContentHTMLHasSuffix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasSuffix(FieldContentHTML, v))
}

// ContentHTMLEqualFold applies the EqualFold predicate on the "content_html" field.
func ContentHTMLEqualFold(v string) predicate.Article {
	return predicate.Article(sql.FieldEqualFold(FieldContentHTML, v))
}

// ContentHTMLContainsFold applies the ContainsFold predicate on the "content_html" field.
func ContentHTMLContainsFold(v string) predicate.Article {
	return predicate.Article(sql.FieldContainsFold(FieldContentHTML, v))
}

// ViewsEQ applies the EQ predicate on the "views" field.
func ViewsEQ(v int64) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldViews, v))
}

// ViewsNEQ applies the NEQ predicate on the "views" field.
func ViewsNEQ(v int64) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldViews, v))
}

// ViewsIn applies the In predicate on the "views" field.
func ViewsIn(vs ...int64) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldViews, vs...))
}

// ViewsNotIn applies the NotIn predicate on the "views" field.
func ViewsNotIn(vs ...int64) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldViews, vs...))
}

// ViewsGT applies the GT predicate on the "views" field.
func ViewsGT(v int64) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldViews, v))
}

// ViewsGTE applies the GTE predicate on the "views" field.
func ViewsGTE(v int64) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldViews, v))
}

// ViewsLT applies the LT predicate on the "views" field.
func ViewsLT(v int64) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldViews, v))
}

// ViewsLTE applies the LTE predicate on the "views" field.
func ViewsLTE(v int64) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldViews, v))
}

// HasTags applies the HasEdge predicate on the "tags" edge.
func HasTags() predicate.Article {
	return predicate.Article(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TagsTable, TagsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagsWith applies the HasEdge predicate on the "tags" edge with a given conditions (other predicates).
func HasTagsWith(preds ...predicate.Tag) predicate.Article {
	return predicate.Article(func(s *sql.Selector) {
		step := newTagsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Article) predicate.Article {
	return predicate.Article(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Article) predicate.Article {
	return predicate.Article(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Article) predicate.Article {
	return predicate.Article(sql.NotPredicates(p))
}
