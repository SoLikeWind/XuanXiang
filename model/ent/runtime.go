// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/SoLikeWind/XuanXiang/model/ent/article"
	"github.com/SoLikeWind/XuanXiang/model/ent/schema"
	"github.com/SoLikeWind/XuanXiang/model/ent/tag"
	"github.com/SoLikeWind/XuanXiang/model/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	articleMixin := schema.Article{}.Mixin()
	articleMixinFields0 := articleMixin[0].Fields()
	_ = articleMixinFields0
	articleFields := schema.Article{}.Fields()
	_ = articleFields
	// articleDescCreatedAt is the schema descriptor for created_at field.
	articleDescCreatedAt := articleMixinFields0[0].Descriptor()
	// article.DefaultCreatedAt holds the default value on creation for the created_at field.
	article.DefaultCreatedAt = articleDescCreatedAt.Default.(func() time.Time)
	// articleDescUpdatedAt is the schema descriptor for updated_at field.
	articleDescUpdatedAt := articleMixinFields0[1].Descriptor()
	// article.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	article.DefaultUpdatedAt = articleDescUpdatedAt.Default.(func() time.Time)
	// article.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	article.UpdateDefaultUpdatedAt = articleDescUpdatedAt.UpdateDefault.(func() time.Time)
	// articleDescTitle is the schema descriptor for title field.
	articleDescTitle := articleFields[1].Descriptor()
	// article.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	article.TitleValidator = func() func(string) error {
		validators := articleDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// articleDescSummary is the schema descriptor for summary field.
	articleDescSummary := articleFields[2].Descriptor()
	// article.SummaryValidator is a validator for the "summary" field. It is called by the builders before save.
	article.SummaryValidator = func() func(string) error {
		validators := articleDescSummary.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(summary string) error {
			for _, fn := range fns {
				if err := fn(summary); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// articleDescImage is the schema descriptor for image field.
	articleDescImage := articleFields[3].Descriptor()
	// article.ImageValidator is a validator for the "image" field. It is called by the builders before save.
	article.ImageValidator = articleDescImage.Validators[0].(func(string) error)
	// articleDescContentMd is the schema descriptor for content_md field.
	articleDescContentMd := articleFields[4].Descriptor()
	// article.ContentMdValidator is a validator for the "content_md" field. It is called by the builders before save.
	article.ContentMdValidator = func() func(string) error {
		validators := articleDescContentMd.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(content_md string) error {
			for _, fn := range fns {
				if err := fn(content_md); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// articleDescContentHTML is the schema descriptor for content_html field.
	articleDescContentHTML := articleFields[5].Descriptor()
	// article.ContentHTMLValidator is a validator for the "content_html" field. It is called by the builders before save.
	article.ContentHTMLValidator = func() func(string) error {
		validators := articleDescContentHTML.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(content_html string) error {
			for _, fn := range fns {
				if err := fn(content_html); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// articleDescViews is the schema descriptor for views field.
	articleDescViews := articleFields[6].Descriptor()
	// article.DefaultViews holds the default value on creation for the views field.
	article.DefaultViews = articleDescViews.Default.(int64)
	// article.ViewsValidator is a validator for the "views" field. It is called by the builders before save.
	article.ViewsValidator = articleDescViews.Validators[0].(func(int64) error)
	tagMixin := schema.Tag{}.Mixin()
	tagMixinFields0 := tagMixin[0].Fields()
	_ = tagMixinFields0
	tagFields := schema.Tag{}.Fields()
	_ = tagFields
	// tagDescCreatedAt is the schema descriptor for created_at field.
	tagDescCreatedAt := tagMixinFields0[0].Descriptor()
	// tag.DefaultCreatedAt holds the default value on creation for the created_at field.
	tag.DefaultCreatedAt = tagDescCreatedAt.Default.(func() time.Time)
	// tagDescUpdatedAt is the schema descriptor for updated_at field.
	tagDescUpdatedAt := tagMixinFields0[1].Descriptor()
	// tag.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	tag.DefaultUpdatedAt = tagDescUpdatedAt.Default.(func() time.Time)
	// tag.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	tag.UpdateDefaultUpdatedAt = tagDescUpdatedAt.UpdateDefault.(func() time.Time)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userMixinFields0[0].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userMixinFields0[1].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
}
