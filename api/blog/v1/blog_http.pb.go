// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.0
// source: blog/v1/blog.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBlogCreateArticle = "/blog.v1.Blog/CreateArticle"
const OperationBlogCreateTag = "/blog.v1.Blog/CreateTag"
const OperationBlogDeleteArticle = "/blog.v1.Blog/DeleteArticle"
const OperationBlogDeleteTag = "/blog.v1.Blog/DeleteTag"
const OperationBlogGetArticle = "/blog.v1.Blog/GetArticle"
const OperationBlogGetTag = "/blog.v1.Blog/GetTag"
const OperationBlogListArticle = "/blog.v1.Blog/ListArticle"
const OperationBlogListTag = "/blog.v1.Blog/ListTag"
const OperationBlogUpdateArticle = "/blog.v1.Blog/UpdateArticle"
const OperationBlogUpdateTag = "/blog.v1.Blog/UpdateTag"

type BlogHTTPServer interface {
	CreateArticle(context.Context, *CreateArticleReq) (*CreateArticleReply, error)
	CreateTag(context.Context, *CreateTagReq) (*CreateTagReply, error)
	DeleteArticle(context.Context, *DeleteArticleReq) (*emptypb.Empty, error)
	DeleteTag(context.Context, *DeleteTagReq) (*emptypb.Empty, error)
	GetArticle(context.Context, *GetArticleReq) (*GetArticleReply, error)
	GetTag(context.Context, *GetTagReq) (*GetTagReply, error)
	ListArticle(context.Context, *ListArticleReq) (*ListArticleReply, error)
	ListTag(context.Context, *ListTagReq) (*ListTagReply, error)
	UpdateArticle(context.Context, *UpdateArticleReq) (*emptypb.Empty, error)
	UpdateTag(context.Context, *UpdateTagReq) (*emptypb.Empty, error)
}

func RegisterBlogHTTPServer(s *http.Server, srv BlogHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/blog/article", _Blog_ListArticle0_HTTP_Handler(srv))
	r.GET("/v1/blog/article/{id}", _Blog_GetArticle0_HTTP_Handler(srv))
	r.POST("/v1/blog/article", _Blog_CreateArticle0_HTTP_Handler(srv))
	r.PUT("/v1/blog/article/{id}", _Blog_UpdateArticle0_HTTP_Handler(srv))
	r.DELETE("/v1/blog/article/{id}", _Blog_DeleteArticle0_HTTP_Handler(srv))
	r.GET("/v1/blog/tag", _Blog_ListTag0_HTTP_Handler(srv))
	r.GET("/v1/blog/tag/{id}", _Blog_GetTag0_HTTP_Handler(srv))
	r.POST("/v1/blog/tag", _Blog_CreateTag0_HTTP_Handler(srv))
	r.PUT("/v1/blog/tag/{id}", _Blog_UpdateTag0_HTTP_Handler(srv))
	r.DELETE("/v1/blog/tag/{id}", _Blog_DeleteTag0_HTTP_Handler(srv))
}

func _Blog_ListArticle0_HTTP_Handler(srv BlogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListArticleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogListArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListArticle(ctx, req.(*ListArticleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListArticleReply)
		return ctx.Result(200, reply)
	}
}

func _Blog_GetArticle0_HTTP_Handler(srv BlogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetArticleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogGetArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArticle(ctx, req.(*GetArticleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleReply)
		return ctx.Result(200, reply)
	}
}

func _Blog_CreateArticle0_HTTP_Handler(srv BlogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateArticleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogCreateArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateArticle(ctx, req.(*CreateArticleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateArticleReply)
		return ctx.Result(200, reply)
	}
}

func _Blog_UpdateArticle0_HTTP_Handler(srv BlogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateArticleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogUpdateArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateArticle(ctx, req.(*UpdateArticleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Blog_DeleteArticle0_HTTP_Handler(srv BlogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteArticleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogDeleteArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteArticle(ctx, req.(*DeleteArticleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Blog_ListTag0_HTTP_Handler(srv BlogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListTagReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogListTag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTag(ctx, req.(*ListTagReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListTagReply)
		return ctx.Result(200, reply)
	}
}

func _Blog_GetTag0_HTTP_Handler(srv BlogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTagReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogGetTag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTag(ctx, req.(*GetTagReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTagReply)
		return ctx.Result(200, reply)
	}
}

func _Blog_CreateTag0_HTTP_Handler(srv BlogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTagReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogCreateTag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTag(ctx, req.(*CreateTagReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTagReply)
		return ctx.Result(200, reply)
	}
}

func _Blog_UpdateTag0_HTTP_Handler(srv BlogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateTagReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogUpdateTag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateTag(ctx, req.(*UpdateTagReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Blog_DeleteTag0_HTTP_Handler(srv BlogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTagReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogDeleteTag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTag(ctx, req.(*DeleteTagReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type BlogHTTPClient interface {
	CreateArticle(ctx context.Context, req *CreateArticleReq, opts ...http.CallOption) (rsp *CreateArticleReply, err error)
	CreateTag(ctx context.Context, req *CreateTagReq, opts ...http.CallOption) (rsp *CreateTagReply, err error)
	DeleteArticle(ctx context.Context, req *DeleteArticleReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteTag(ctx context.Context, req *DeleteTagReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetArticle(ctx context.Context, req *GetArticleReq, opts ...http.CallOption) (rsp *GetArticleReply, err error)
	GetTag(ctx context.Context, req *GetTagReq, opts ...http.CallOption) (rsp *GetTagReply, err error)
	ListArticle(ctx context.Context, req *ListArticleReq, opts ...http.CallOption) (rsp *ListArticleReply, err error)
	ListTag(ctx context.Context, req *ListTagReq, opts ...http.CallOption) (rsp *ListTagReply, err error)
	UpdateArticle(ctx context.Context, req *UpdateArticleReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateTag(ctx context.Context, req *UpdateTagReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type BlogHTTPClientImpl struct {
	cc *http.Client
}

func NewBlogHTTPClient(client *http.Client) BlogHTTPClient {
	return &BlogHTTPClientImpl{client}
}

func (c *BlogHTTPClientImpl) CreateArticle(ctx context.Context, in *CreateArticleReq, opts ...http.CallOption) (*CreateArticleReply, error) {
	var out CreateArticleReply
	pattern := "/v1/blog/article"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBlogCreateArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlogHTTPClientImpl) CreateTag(ctx context.Context, in *CreateTagReq, opts ...http.CallOption) (*CreateTagReply, error) {
	var out CreateTagReply
	pattern := "/v1/blog/tag"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBlogCreateTag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlogHTTPClientImpl) DeleteArticle(ctx context.Context, in *DeleteArticleReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/blog/article/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBlogDeleteArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlogHTTPClientImpl) DeleteTag(ctx context.Context, in *DeleteTagReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/blog/tag/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBlogDeleteTag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlogHTTPClientImpl) GetArticle(ctx context.Context, in *GetArticleReq, opts ...http.CallOption) (*GetArticleReply, error) {
	var out GetArticleReply
	pattern := "/v1/blog/article/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBlogGetArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlogHTTPClientImpl) GetTag(ctx context.Context, in *GetTagReq, opts ...http.CallOption) (*GetTagReply, error) {
	var out GetTagReply
	pattern := "/v1/blog/tag/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBlogGetTag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlogHTTPClientImpl) ListArticle(ctx context.Context, in *ListArticleReq, opts ...http.CallOption) (*ListArticleReply, error) {
	var out ListArticleReply
	pattern := "/v1/blog/article"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBlogListArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlogHTTPClientImpl) ListTag(ctx context.Context, in *ListTagReq, opts ...http.CallOption) (*ListTagReply, error) {
	var out ListTagReply
	pattern := "/v1/blog/tag"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBlogListTag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlogHTTPClientImpl) UpdateArticle(ctx context.Context, in *UpdateArticleReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/blog/article/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBlogUpdateArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlogHTTPClientImpl) UpdateTag(ctx context.Context, in *UpdateTagReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/blog/tag/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBlogUpdateTag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
