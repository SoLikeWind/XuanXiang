syntax = "proto3";

package blog.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";
import "common/model/blog_field.proto";//github.com/SoLikeWind/XuanXiang/api/

option go_package = "github.com/SoLikeWind/XuanXiang/api/blog/v1;v1";

service Blog {
	rpc ListArticle (ListArticleReq) returns (ListArticleReply) {
		option (google.api.http) = {
			get: "/v1/blog/article"
		};
	}
	rpc GetArticle (GetArticleReq) returns (GetArticleReply) {
		option (google.api.http) = {
			get: "/v1/blog/article/{id}"
		};
	}
	rpc CreateArticle (CreateArticleReq) returns (CreateArticleReply) {
		option (google.api.http) = {
			post: "/v1/blog/article"
			body: "*"
		};
	}
	rpc UpdateArticle (UpdateArticleReq) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			put: "/v1/blog/article/{id}"
			body: "*"
		};
	}
	rpc DeleteArticle (DeleteArticleReq) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			delete: "/v1/blog/article/{id}"
		};
	}

	rpc ListTag (ListTagReq) returns (ListTagReply) {
		option (google.api.http) = {
			get: "/v1/blog/tag"
		};
	}
	rpc GetTag (GetTagReq) returns (GetTagReply) {
		option (google.api.http) = {
			get: "/v1/blog/tag/{id}"
		};
	}
	rpc CreateTag (CreateTagReq) returns (CreateTagReply) {
		option (google.api.http) = {
			post: "/v1/blog/tag"
			body: "*"
		};
	}
	rpc UpdateTag (UpdateTagReq) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			put: "/v1/blog/tag/{id}"
			body: "*"
		};
	}
	rpc DeleteTag (DeleteTagReq) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			delete: "/v1/blog/tag/{id}"
		};
	}
};


message ListArticleReq {
	int64 page = 1;
	int64 page_size = 2;
	string tag = 3;
}

message ListArticleReply {
	repeated common.model.Article articles = 1;
}

message GetArticleReq {
	int64 id = 1[(validate.rules).int64 = {gt: 0}];
}

message GetArticleReply {
	common.model.Article article = 1;
}

message CreateArticleReq {
    string title = 1;
    string summary = 2;
    optional string image = 3;
    string content_md = 4;
}

message CreateArticleReply {
	common.model.Article article = 1;
}

message UpdateArticleReq {
    int64 id = 1[(validate.rules).int64 = {gt: 0}];
    optional string title = 2[(validate.rules).string = {min_len: 1, max_len: 120}];
    optional string summary = 3[(validate.rules).string =  {min_len: 1, max_len: 240}];
    optional string image = 4[(validate.rules).string = {min_len: 1, max_len: 120}];
    optional string content_md = 5[(validate.rules).string = {min_len: 1, max_len: 100000}];
}

message UpdateArticleReply {
	common.model.Article article = 1;
}

message DeleteArticleReq {
	int64 id = 1[(validate.rules).int64 = {gt: 0}];
}

message  ListTagReq {
	int64 page = 1;
	int64 page_size = 2;
}

message ListTagReply {
	int64 total = 1;
	repeated common.model.Tag tags = 2;
}

message GetTagReq {
	string id = 1;
}

message GetTagReply {
	common.model.Tag tag = 1;
}

message CreateTagReq {
	string name = 1;
}

message CreateTagReply {
	common.model.Tag tag = 1;
}

message UpdateTagReq {
	string id = 1;
	string name = 2;
}

message DeleteTagReq {
	string id = 1;
}


