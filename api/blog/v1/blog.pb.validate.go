// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: blog/v1/blog.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListArticleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListArticleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListArticleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListArticleReqMultiError,
// or nil if none found.
func (m *ListArticleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListArticleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Tag

	if len(errors) > 0 {
		return ListArticleReqMultiError(errors)
	}

	return nil
}

// ListArticleReqMultiError is an error wrapping multiple validation errors
// returned by ListArticleReq.ValidateAll() if the designated constraints
// aren't met.
type ListArticleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListArticleReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListArticleReqMultiError) AllErrors() []error { return m }

// ListArticleReqValidationError is the validation error returned by
// ListArticleReq.Validate if the designated constraints aren't met.
type ListArticleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListArticleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListArticleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListArticleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListArticleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListArticleReqValidationError) ErrorName() string { return "ListArticleReqValidationError" }

// Error satisfies the builtin error interface
func (e ListArticleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListArticleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListArticleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListArticleReqValidationError{}

// Validate checks the field values on ListArticleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListArticleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListArticleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListArticleReplyMultiError, or nil if none found.
func (m *ListArticleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListArticleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetArticles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListArticleReplyValidationError{
						field:  fmt.Sprintf("Articles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListArticleReplyValidationError{
						field:  fmt.Sprintf("Articles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListArticleReplyValidationError{
					field:  fmt.Sprintf("Articles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListArticleReplyMultiError(errors)
	}

	return nil
}

// ListArticleReplyMultiError is an error wrapping multiple validation errors
// returned by ListArticleReply.ValidateAll() if the designated constraints
// aren't met.
type ListArticleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListArticleReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListArticleReplyMultiError) AllErrors() []error { return m }

// ListArticleReplyValidationError is the validation error returned by
// ListArticleReply.Validate if the designated constraints aren't met.
type ListArticleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListArticleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListArticleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListArticleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListArticleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListArticleReplyValidationError) ErrorName() string { return "ListArticleReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListArticleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListArticleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListArticleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListArticleReplyValidationError{}

// Validate checks the field values on GetArticleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetArticleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetArticleReqMultiError, or
// nil if none found.
func (m *GetArticleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetArticleReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetArticleReqMultiError(errors)
	}

	return nil
}

// GetArticleReqMultiError is an error wrapping multiple validation errors
// returned by GetArticleReq.ValidateAll() if the designated constraints
// aren't met.
type GetArticleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleReqMultiError) AllErrors() []error { return m }

// GetArticleReqValidationError is the validation error returned by
// GetArticleReq.Validate if the designated constraints aren't met.
type GetArticleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleReqValidationError) ErrorName() string { return "GetArticleReqValidationError" }

// Error satisfies the builtin error interface
func (e GetArticleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleReqValidationError{}

// Validate checks the field values on GetArticleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetArticleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleReplyMultiError, or nil if none found.
func (m *GetArticleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetArticle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetArticleReplyValidationError{
					field:  "Article",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetArticleReplyValidationError{
					field:  "Article",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArticle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetArticleReplyValidationError{
				field:  "Article",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetArticleReplyMultiError(errors)
	}

	return nil
}

// GetArticleReplyMultiError is an error wrapping multiple validation errors
// returned by GetArticleReply.ValidateAll() if the designated constraints
// aren't met.
type GetArticleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleReplyMultiError) AllErrors() []error { return m }

// GetArticleReplyValidationError is the validation error returned by
// GetArticleReply.Validate if the designated constraints aren't met.
type GetArticleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleReplyValidationError) ErrorName() string { return "GetArticleReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetArticleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleReplyValidationError{}

// Validate checks the field values on CreateArticleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateArticleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateArticleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateArticleReqMultiError, or nil if none found.
func (m *CreateArticleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateArticleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Summary

	// no validation rules for ContentMd

	if m.Image != nil {
		// no validation rules for Image
	}

	if len(errors) > 0 {
		return CreateArticleReqMultiError(errors)
	}

	return nil
}

// CreateArticleReqMultiError is an error wrapping multiple validation errors
// returned by CreateArticleReq.ValidateAll() if the designated constraints
// aren't met.
type CreateArticleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateArticleReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateArticleReqMultiError) AllErrors() []error { return m }

// CreateArticleReqValidationError is the validation error returned by
// CreateArticleReq.Validate if the designated constraints aren't met.
type CreateArticleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateArticleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateArticleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateArticleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateArticleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateArticleReqValidationError) ErrorName() string { return "CreateArticleReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateArticleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateArticleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateArticleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateArticleReqValidationError{}

// Validate checks the field values on CreateArticleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateArticleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateArticleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateArticleReplyMultiError, or nil if none found.
func (m *CreateArticleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateArticleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetArticle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateArticleReplyValidationError{
					field:  "Article",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateArticleReplyValidationError{
					field:  "Article",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArticle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateArticleReplyValidationError{
				field:  "Article",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateArticleReplyMultiError(errors)
	}

	return nil
}

// CreateArticleReplyMultiError is an error wrapping multiple validation errors
// returned by CreateArticleReply.ValidateAll() if the designated constraints
// aren't met.
type CreateArticleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateArticleReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateArticleReplyMultiError) AllErrors() []error { return m }

// CreateArticleReplyValidationError is the validation error returned by
// CreateArticleReply.Validate if the designated constraints aren't met.
type CreateArticleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateArticleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateArticleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateArticleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateArticleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateArticleReplyValidationError) ErrorName() string {
	return "CreateArticleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateArticleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateArticleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateArticleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateArticleReplyValidationError{}

// Validate checks the field values on UpdateArticleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateArticleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateArticleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateArticleReqMultiError, or nil if none found.
func (m *UpdateArticleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateArticleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateArticleReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Title != nil {

		if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 120 {
			err := UpdateArticleReqValidationError{
				field:  "Title",
				reason: "value length must be between 1 and 120 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Summary != nil {

		if l := utf8.RuneCountInString(m.GetSummary()); l < 1 || l > 240 {
			err := UpdateArticleReqValidationError{
				field:  "Summary",
				reason: "value length must be between 1 and 240 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Image != nil {

		if l := utf8.RuneCountInString(m.GetImage()); l < 1 || l > 120 {
			err := UpdateArticleReqValidationError{
				field:  "Image",
				reason: "value length must be between 1 and 120 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.ContentMd != nil {

		if l := utf8.RuneCountInString(m.GetContentMd()); l < 1 || l > 100000 {
			err := UpdateArticleReqValidationError{
				field:  "ContentMd",
				reason: "value length must be between 1 and 100000 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateArticleReqMultiError(errors)
	}

	return nil
}

// UpdateArticleReqMultiError is an error wrapping multiple validation errors
// returned by UpdateArticleReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateArticleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateArticleReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateArticleReqMultiError) AllErrors() []error { return m }

// UpdateArticleReqValidationError is the validation error returned by
// UpdateArticleReq.Validate if the designated constraints aren't met.
type UpdateArticleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateArticleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateArticleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateArticleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateArticleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateArticleReqValidationError) ErrorName() string { return "UpdateArticleReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateArticleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateArticleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateArticleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateArticleReqValidationError{}

// Validate checks the field values on UpdateArticleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateArticleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateArticleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateArticleReplyMultiError, or nil if none found.
func (m *UpdateArticleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateArticleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetArticle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateArticleReplyValidationError{
					field:  "Article",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateArticleReplyValidationError{
					field:  "Article",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArticle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateArticleReplyValidationError{
				field:  "Article",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateArticleReplyMultiError(errors)
	}

	return nil
}

// UpdateArticleReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateArticleReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateArticleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateArticleReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateArticleReplyMultiError) AllErrors() []error { return m }

// UpdateArticleReplyValidationError is the validation error returned by
// UpdateArticleReply.Validate if the designated constraints aren't met.
type UpdateArticleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateArticleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateArticleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateArticleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateArticleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateArticleReplyValidationError) ErrorName() string {
	return "UpdateArticleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateArticleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateArticleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateArticleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateArticleReplyValidationError{}

// Validate checks the field values on DeleteArticleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteArticleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteArticleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteArticleReqMultiError, or nil if none found.
func (m *DeleteArticleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteArticleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteArticleReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteArticleReqMultiError(errors)
	}

	return nil
}

// DeleteArticleReqMultiError is an error wrapping multiple validation errors
// returned by DeleteArticleReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteArticleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteArticleReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteArticleReqMultiError) AllErrors() []error { return m }

// DeleteArticleReqValidationError is the validation error returned by
// DeleteArticleReq.Validate if the designated constraints aren't met.
type DeleteArticleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteArticleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteArticleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteArticleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteArticleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteArticleReqValidationError) ErrorName() string { return "DeleteArticleReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteArticleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteArticleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteArticleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteArticleReqValidationError{}

// Validate checks the field values on ListTagReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListTagReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTagReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListTagReqMultiError, or
// nil if none found.
func (m *ListTagReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTagReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Name

	if len(errors) > 0 {
		return ListTagReqMultiError(errors)
	}

	return nil
}

// ListTagReqMultiError is an error wrapping multiple validation errors
// returned by ListTagReq.ValidateAll() if the designated constraints aren't met.
type ListTagReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTagReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTagReqMultiError) AllErrors() []error { return m }

// ListTagReqValidationError is the validation error returned by
// ListTagReq.Validate if the designated constraints aren't met.
type ListTagReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTagReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTagReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTagReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTagReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTagReqValidationError) ErrorName() string { return "ListTagReqValidationError" }

// Error satisfies the builtin error interface
func (e ListTagReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTagReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTagReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTagReqValidationError{}

// Validate checks the field values on ListTagReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListTagReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTagReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListTagReplyMultiError, or
// nil if none found.
func (m *ListTagReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTagReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTagReplyValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTagReplyValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTagReplyValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTagReplyMultiError(errors)
	}

	return nil
}

// ListTagReplyMultiError is an error wrapping multiple validation errors
// returned by ListTagReply.ValidateAll() if the designated constraints aren't met.
type ListTagReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTagReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTagReplyMultiError) AllErrors() []error { return m }

// ListTagReplyValidationError is the validation error returned by
// ListTagReply.Validate if the designated constraints aren't met.
type ListTagReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTagReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTagReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTagReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTagReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTagReplyValidationError) ErrorName() string { return "ListTagReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListTagReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTagReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTagReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTagReplyValidationError{}

// Validate checks the field values on GetTagReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTagReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTagReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetTagReqMultiError, or nil
// if none found.
func (m *GetTagReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTagReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetTagReqMultiError(errors)
	}

	return nil
}

// GetTagReqMultiError is an error wrapping multiple validation errors returned
// by GetTagReq.ValidateAll() if the designated constraints aren't met.
type GetTagReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTagReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTagReqMultiError) AllErrors() []error { return m }

// GetTagReqValidationError is the validation error returned by
// GetTagReq.Validate if the designated constraints aren't met.
type GetTagReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTagReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTagReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTagReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTagReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTagReqValidationError) ErrorName() string { return "GetTagReqValidationError" }

// Error satisfies the builtin error interface
func (e GetTagReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTagReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTagReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTagReqValidationError{}

// Validate checks the field values on GetTagReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTagReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTagReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetTagReplyMultiError, or
// nil if none found.
func (m *GetTagReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTagReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTag()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTagReplyValidationError{
					field:  "Tag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTagReplyValidationError{
					field:  "Tag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTag()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTagReplyValidationError{
				field:  "Tag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTagReplyMultiError(errors)
	}

	return nil
}

// GetTagReplyMultiError is an error wrapping multiple validation errors
// returned by GetTagReply.ValidateAll() if the designated constraints aren't met.
type GetTagReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTagReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTagReplyMultiError) AllErrors() []error { return m }

// GetTagReplyValidationError is the validation error returned by
// GetTagReply.Validate if the designated constraints aren't met.
type GetTagReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTagReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTagReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTagReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTagReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTagReplyValidationError) ErrorName() string { return "GetTagReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetTagReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTagReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTagReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTagReplyValidationError{}

// Validate checks the field values on CreateTagReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateTagReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTagReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateTagReqMultiError, or
// nil if none found.
func (m *CreateTagReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTagReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return CreateTagReqMultiError(errors)
	}

	return nil
}

// CreateTagReqMultiError is an error wrapping multiple validation errors
// returned by CreateTagReq.ValidateAll() if the designated constraints aren't met.
type CreateTagReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTagReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTagReqMultiError) AllErrors() []error { return m }

// CreateTagReqValidationError is the validation error returned by
// CreateTagReq.Validate if the designated constraints aren't met.
type CreateTagReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTagReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTagReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTagReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTagReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTagReqValidationError) ErrorName() string { return "CreateTagReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateTagReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTagReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTagReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTagReqValidationError{}

// Validate checks the field values on CreateTagReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateTagReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTagReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateTagReplyMultiError,
// or nil if none found.
func (m *CreateTagReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTagReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTag()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTagReplyValidationError{
					field:  "Tag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTagReplyValidationError{
					field:  "Tag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTag()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTagReplyValidationError{
				field:  "Tag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTagReplyMultiError(errors)
	}

	return nil
}

// CreateTagReplyMultiError is an error wrapping multiple validation errors
// returned by CreateTagReply.ValidateAll() if the designated constraints
// aren't met.
type CreateTagReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTagReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTagReplyMultiError) AllErrors() []error { return m }

// CreateTagReplyValidationError is the validation error returned by
// CreateTagReply.Validate if the designated constraints aren't met.
type CreateTagReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTagReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTagReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTagReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTagReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTagReplyValidationError) ErrorName() string { return "CreateTagReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateTagReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTagReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTagReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTagReplyValidationError{}

// Validate checks the field values on UpdateTagReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateTagReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTagReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateTagReqMultiError, or
// nil if none found.
func (m *UpdateTagReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTagReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return UpdateTagReqMultiError(errors)
	}

	return nil
}

// UpdateTagReqMultiError is an error wrapping multiple validation errors
// returned by UpdateTagReq.ValidateAll() if the designated constraints aren't met.
type UpdateTagReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTagReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTagReqMultiError) AllErrors() []error { return m }

// UpdateTagReqValidationError is the validation error returned by
// UpdateTagReq.Validate if the designated constraints aren't met.
type UpdateTagReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTagReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTagReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTagReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTagReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTagReqValidationError) ErrorName() string { return "UpdateTagReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateTagReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTagReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTagReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTagReqValidationError{}

// Validate checks the field values on DeleteTagReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteTagReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTagReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteTagReqMultiError, or
// nil if none found.
func (m *DeleteTagReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTagReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteTagReqMultiError(errors)
	}

	return nil
}

// DeleteTagReqMultiError is an error wrapping multiple validation errors
// returned by DeleteTagReq.ValidateAll() if the designated constraints aren't met.
type DeleteTagReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTagReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTagReqMultiError) AllErrors() []error { return m }

// DeleteTagReqValidationError is the validation error returned by
// DeleteTagReq.Validate if the designated constraints aren't met.
type DeleteTagReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTagReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTagReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTagReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTagReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTagReqValidationError) ErrorName() string { return "DeleteTagReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteTagReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTagReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTagReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTagReqValidationError{}
